import { startRecorder } from '/util/recorder.js';
const el = (id) => document.getElementById(id);
const logEl = el('log'); const recStatus = el('recStatus'); const botAudio = el('botAudio');
let session = { passcodeOk:false, scenarioId:'printer_not_printing', history:[] };
function appendMsg(speaker, text){ const d=document.createElement('div'); d.className='msg '+speaker; d.textContent=(speaker==='agent'?'Agent: ':'Customer: ')+text; logEl.appendChild(d); logEl.scrollTop=logEl.scrollHeight; }
async function speak(text){ const r=await fetch('/api/tts',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text})}); if(!r.ok)return; const buf=await r.arrayBuffer(); const blob=new Blob([buf],{type:'audio/mpeg'}); botAudio.src=URL.createObjectURL(blob); await botAudio.play().catch(()=>{}); }
async function login(){ const passcode=el('passcode').value.trim(); const r=await fetch('/api/auth',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({passcode})}); const data=await r.json(); el('loginStatus').textContent=data.ok?'Access granted.':'Invalid passcode.'; session.passcodeOk=!!data.ok; }
el('btnLogin').addEventListener('click', login);
el('btnStart').addEventListener('click', async ()=>{ session.scenarioId=el('scenario').value; session.history=[]; logEl.innerHTML=''; const r=await fetch('/api/reply',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({scenarioId:session.scenarioId,history:session.history,agentUtterance:''})}); const data=await r.json(); if(data.customerText){ session.history.push({speaker:'bot', text:data.customerText}); appendMsg('bot', data.customerText); await speak(data.customerText);} });
el('btnEnd').addEventListener('click', async ()=>{ const r=await fetch('/api/score',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({scenarioId:session.scenarioId,history:session.history})}); const data=await r.json(); const summary=`Score: ${data.total}/100 | Greeting ${data.greeting}/5 | Objections ${data.objections}/5 | Session ${data.session}/5 | Explanation ${data.explanation}/5 | Verification ${data.verification}/5 | Pricing ${data.pricing}/5 | Notes: ${data.notes}`; appendMsg('bot', summary); await speak('Training complete. '+summary.replace(/\|/g, ',')); });
let rec; el('btnRecord').addEventListener('mousedown', async ()=>{ rec=await startRecorder(); recStatus.textContent='Recording... release to send.'; });
el('btnRecord').addEventListener('mouseup', async ()=>{ if(!rec) return; recStatus.textContent='Transcribing...'; const blob=await rec.stop(); rec=null; const fd=new FormData(); fd.append('audio', blob, 'speech.webm'); const stt=await fetch('/api/transcribe',{method:'POST', body:fd}); const data=await stt.json(); const text=(data.text||'').trim(); if(!text){ recStatus.textContent='Didn\'t catch that. Try again.'; return; } appendMsg('agent', text); session.history.push({speaker:'agent', text}); const r=await fetch('/api/reply',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({scenarioId:session.scenarioId,history:session.history,agentUtterance:text})}); const out=await r.json(); if(out.customerText){ appendMsg('bot', out.customerText); session.history.push({speaker:'bot', text:out.customerText}); await speak(out.customerText);} recStatus.textContent='Idle'; });
